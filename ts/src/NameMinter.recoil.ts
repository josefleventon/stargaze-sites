/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClient } from "./chain";
import { Uint128, InstantiateMsg, ExecuteMsg, Timestamp, Uint64, Config, QueryMsg, AdminResponse, CollectionResponse, ConfigResponse, Decimal, ParamsResponse, SudoParams, Addr, WhitelistsResponse } from "./NameMinter.types";
import { NameMinterQueryClient } from "./NameMinter.client";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<NameMinterQueryClient, QueryClientParams>({
  key: "nameMinterQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new NameMinterQueryClient(client, contractAddress);
  }
});
export const adminSelector = selectorFamily<AdminResponse, QueryClientParams & {
  params: Parameters<NameMinterQueryClient["admin"]>;
}>({
  key: "nameMinterAdmin",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.admin(...params);
  }
});
export const whitelistsSelector = selectorFamily<WhitelistsResponse, QueryClientParams & {
  params: Parameters<NameMinterQueryClient["whitelists"]>;
}>({
  key: "nameMinterWhitelists",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.whitelists(...params);
  }
});
export const collectionSelector = selectorFamily<CollectionResponse, QueryClientParams & {
  params: Parameters<NameMinterQueryClient["collection"]>;
}>({
  key: "nameMinterCollection",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.collection(...params);
  }
});
export const paramsSelector = selectorFamily<ParamsResponse, QueryClientParams & {
  params: Parameters<NameMinterQueryClient["params"]>;
}>({
  key: "nameMinterParams",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.params(...params);
  }
});
export const configSelector = selectorFamily<ConfigResponse, QueryClientParams & {
  params: Parameters<NameMinterQueryClient["config"]>;
}>({
  key: "nameMinterConfig",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.config(...params);
  }
});