/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { Coin, StdFee } from "@cosmjs/amino";
import { Decimal, Timestamp, Uint64, InstantiateMsg, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, ExecuteMsg, Addr, LayoutContent, NFT, Row, LayoutItem, NFTDisplayType, TextBoxType, Button, SparkDonationType, QueryMsg, Uint128, ParamsResponse, SiteResponse, Site } from "./Sites.types";
export interface SitesReadOnlyInterface {
  contractAddress: string;
  site: ({
    address
  }: {
    address: string;
  }) => Promise<SiteResponse>;
  params: () => Promise<ParamsResponse>;
}
export class SitesQueryClient implements SitesReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.site = this.site.bind(this);
    this.params = this.params.bind(this);
  }

  site = async ({
    address
  }: {
    address: string;
  }): Promise<SiteResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      site: {
        address
      }
    });
  };
  params = async (): Promise<ParamsResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      params: {}
    });
  };
}
export interface SitesInterface extends SitesReadOnlyInterface {
  contractAddress: string;
  sender: string;
  createSite: ({
    name
  }: {
    name: string;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateInfo: ({
    bio,
    name,
    profileBanner,
    profilePicture
  }: {
    bio?: string;
    name: string;
    profileBanner?: NFT;
    profilePicture?: NFT;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  updateLayout: ({
    layout
  }: {
    layout: Row[];
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class SitesClient extends SitesQueryClient implements SitesInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.createSite = this.createSite.bind(this);
    this.updateInfo = this.updateInfo.bind(this);
    this.updateLayout = this.updateLayout.bind(this);
  }

  createSite = async ({
    name
  }: {
    name: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      create_site: {
        name
      }
    }, fee, memo, funds);
  };
  updateInfo = async ({
    bio,
    name,
    profileBanner,
    profilePicture
  }: {
    bio?: string;
    name: string;
    profileBanner?: NFT;
    profilePicture?: NFT;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_info: {
        bio,
        name,
        profile_banner: profileBanner,
        profile_picture: profilePicture
      }
    }, fee, memo, funds);
  };
  updateLayout = async ({
    layout
  }: {
    layout: Row[];
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      update_layout: {
        layout
      }
    }, fee, memo, funds);
  };
}