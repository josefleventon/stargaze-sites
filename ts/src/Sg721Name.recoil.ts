/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClient } from "./chain";
import { Decimal, Timestamp, Uint64, InstantiateMsg, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, ExecuteMsg, Addr, Binary, Expiration, Metadata, NFT, TextRecord, MintMsgForMetadata, UpdateCollectionInfoMsgForRoyaltyInfoResponse, QueryMsg, AllNftInfoResponseForMetadata, OwnerOfResponse, Approval, NftInfoResponseForMetadata, OperatorsResponse, TokensResponse, ApprovalResponse, ApprovalsResponse, CollectionInfoResponse, ContractInfoResponse, MinterResponse, NameResponse, NameMarketplaceResponse, NumTokensResponse, ParamsResponse, Nullable_String } from "./Sg721Name.types";
import { Sg721NameQueryClient } from "./Sg721Name.client";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<Sg721NameQueryClient, QueryClientParams>({
  key: "sg721NameQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new Sg721NameQueryClient(client, contractAddress);
  }
});
export const paramsSelector = selectorFamily<ParamsResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["params"]>;
}>({
  key: "sg721NameParams",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.params(...params);
  }
});
export const nameSelector = selectorFamily<NameResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["name"]>;
}>({
  key: "sg721NameName",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.name(...params);
  }
});
export const nameMarketplaceSelector = selectorFamily<NameMarketplaceResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["nameMarketplace"]>;
}>({
  key: "sg721NameNameMarketplace",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.nameMarketplace(...params);
  }
});
export const verifierSelector = selectorFamily<NullableString, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["verifier"]>;
}>({
  key: "sg721NameVerifier",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.verifier(...params);
  }
});
export const ownerOfSelector = selectorFamily<OwnerOfResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["ownerOf"]>;
}>({
  key: "sg721NameOwnerOf",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.ownerOf(...params);
  }
});
export const approvalSelector = selectorFamily<ApprovalResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["approval"]>;
}>({
  key: "sg721NameApproval",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.approval(...params);
  }
});
export const approvalsSelector = selectorFamily<ApprovalsResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["approvals"]>;
}>({
  key: "sg721NameApprovals",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.approvals(...params);
  }
});
export const allOperatorsSelector = selectorFamily<OperatorsResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["allOperators"]>;
}>({
  key: "sg721NameAllOperators",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allOperators(...params);
  }
});
export const numTokensSelector = selectorFamily<NumTokensResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["numTokens"]>;
}>({
  key: "sg721NameNumTokens",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.numTokens(...params);
  }
});
export const contractInfoSelector = selectorFamily<ContractInfoResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["contractInfo"]>;
}>({
  key: "sg721NameContractInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.contractInfo(...params);
  }
});
export const nftInfoSelector = selectorFamily<NftInfoResponseForMetadata, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["nftInfo"]>;
}>({
  key: "sg721NameNftInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.nftInfo(...params);
  }
});
export const allNftInfoSelector = selectorFamily<AllNftInfoResponseForMetadata, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["allNftInfo"]>;
}>({
  key: "sg721NameAllNftInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allNftInfo(...params);
  }
});
export const tokensSelector = selectorFamily<TokensResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["tokens"]>;
}>({
  key: "sg721NameTokens",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.tokens(...params);
  }
});
export const allTokensSelector = selectorFamily<TokensResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["allTokens"]>;
}>({
  key: "sg721NameAllTokens",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.allTokens(...params);
  }
});
export const minterSelector = selectorFamily<MinterResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["minter"]>;
}>({
  key: "sg721NameMinter",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.minter(...params);
  }
});
export const collectionInfoSelector = selectorFamily<CollectionInfoResponse, QueryClientParams & {
  params: Parameters<Sg721NameQueryClient["collectionInfo"]>;
}>({
  key: "sg721NameCollectionInfo",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.collectionInfo(...params);
  }
});