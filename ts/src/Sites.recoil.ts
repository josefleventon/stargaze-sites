/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.19.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { selectorFamily } from "recoil";
import { cosmWasmClient } from "./chain";
import { Decimal, Timestamp, Uint64, InstantiateMsg, CollectionInfoForRoyaltyInfoResponse, RoyaltyInfoResponse, ExecuteMsg, Addr, LayoutContent, NFT, Row, LayoutItem, NFTDisplayType, TextBoxType, Button, SparkDonationType, QueryMsg, Uint128, ParamsResponse, SiteResponse, Site } from "./Sites.types";
import { SitesQueryClient } from "./Sites.client";
type QueryClientParams = {
  contractAddress: string;
};
export const queryClient = selectorFamily<SitesQueryClient, QueryClientParams>({
  key: "sitesQueryClient",
  get: ({
    contractAddress
  }) => ({
    get
  }) => {
    const client = get(cosmWasmClient);
    return new SitesQueryClient(client, contractAddress);
  }
});
export const siteSelector = selectorFamily<SiteResponse, QueryClientParams & {
  params: Parameters<SitesQueryClient["site"]>;
}>({
  key: "sitesSite",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.site(...params);
  }
});
export const paramsSelector = selectorFamily<ParamsResponse, QueryClientParams & {
  params: Parameters<SitesQueryClient["params"]>;
}>({
  key: "sitesParams",
  get: ({
    params,
    ...queryClientParams
  }) => async ({
    get
  }) => {
    const client = get(queryClient(queryClientParams));
    return await client.params(...params);
  }
});