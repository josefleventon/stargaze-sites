{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "ExecuteMsg",
  "oneOf": [
    {
      "description": "List name NFT on the marketplace by creating a new ask. Only the name minter can call this.",
      "type": "object",
      "required": [
        "set_ask"
      ],
      "properties": {
        "set_ask": {
          "type": "object",
          "required": [
            "seller",
            "token_id"
          ],
          "properties": {
            "seller": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove name on the marketplace. Only the name collection can call this (i.e: when burned).",
      "type": "object",
      "required": [
        "remove_ask"
      ],
      "properties": {
        "remove_ask": {
          "type": "object",
          "required": [
            "token_id"
          ],
          "properties": {
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Update ask when an NFT is transferred Only the name collection can call this",
      "type": "object",
      "required": [
        "update_ask"
      ],
      "properties": {
        "update_ask": {
          "type": "object",
          "required": [
            "seller",
            "token_id"
          ],
          "properties": {
            "seller": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Place a bid on an existing ask",
      "type": "object",
      "required": [
        "set_bid"
      ],
      "properties": {
        "set_bid": {
          "type": "object",
          "required": [
            "token_id"
          ],
          "properties": {
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Remove an existing bid from an ask",
      "type": "object",
      "required": [
        "remove_bid"
      ],
      "properties": {
        "remove_bid": {
          "type": "object",
          "required": [
            "token_id"
          ],
          "properties": {
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Accept a bid on an existing ask",
      "type": "object",
      "required": [
        "accept_bid"
      ],
      "properties": {
        "accept_bid": {
          "type": "object",
          "required": [
            "bidder",
            "token_id"
          ],
          "properties": {
            "bidder": {
              "type": "string"
            },
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Fund renewal of a name",
      "type": "object",
      "required": [
        "fund_renewal"
      ],
      "properties": {
        "fund_renewal": {
          "type": "object",
          "required": [
            "token_id"
          ],
          "properties": {
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Refund a renewal of a name",
      "type": "object",
      "required": [
        "refund_renewal"
      ],
      "properties": {
        "refund_renewal": {
          "type": "object",
          "required": [
            "token_id"
          ],
          "properties": {
            "token_id": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Check if expired names have been paid for, and collect fees. If not paid, transfer ownership to the highest bidder.",
      "type": "object",
      "required": [
        "process_renewals"
      ],
      "properties": {
        "process_renewals": {
          "type": "object",
          "required": [
            "time"
          ],
          "properties": {
            "time": {
              "$ref": "#/definitions/Timestamp"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    },
    {
      "description": "Setup contract with minter and collection addresses Can only be run once",
      "type": "object",
      "required": [
        "setup"
      ],
      "properties": {
        "setup": {
          "type": "object",
          "required": [
            "collection",
            "minter"
          ],
          "properties": {
            "collection": {
              "type": "string"
            },
            "minter": {
              "type": "string"
            }
          },
          "additionalProperties": false
        }
      },
      "additionalProperties": false
    }
  ],
  "definitions": {
    "Timestamp": {
      "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
      "allOf": [
        {
          "$ref": "#/definitions/Uint64"
        }
      ]
    },
    "Uint64": {
      "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
      "type": "string"
    }
  }
}
